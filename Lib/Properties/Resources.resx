<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AdminWarning" xml:space="preserve">
    <value>Attack Surface Analyzer is not running as Administrator/Root results may be incomplete.</value>
  </data>
  <data name="Begin" xml:space="preserve">
    <value>Begin {0}.</value>
  </data>
  <data name="Comparing" xml:space="preserve">
    <value>Comparing {0} vs {1}.</value>
  </data>
  <data name="LoadingSavedComparison" xml:space="preserve">
    <value>Loading saved comparison of {0} vs {1} with Analysis Hash {2}.</value>
  </data>
  <data name="DeletedDatabase" xml:space="preserve">
    <value>Successfully deleted database.</value>
  </data>
  <data name="DoneWriting" xml:space="preserve">
    <value>Done writing!</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>End {0}.</value>
  </data>
  <data name="EnumeratingCollectRunIds" xml:space="preserve">
    <value>Enumerating Collect Run Ids</value>
  </data>
  <data name="EnumeratingMonitorRunIds" xml:space="preserve">
    <value>Enumerating Monitor Run Ids</value>
  </data>
  <data name="Err_CollectingFrom" xml:space="preserve">
    <value>Error collecting from {0}: {1} {2}</value>
  </data>
  <data name="Err_CouldntDetermineOneRun" xml:space="preserve">
    <value>Couldn't determine latest run id. Can't continue.</value>
  </data>
  <data name="Err_CouldntDetermineTwoRun" xml:space="preserve">
    <value>Couldn't determine latest two run ids. Can't continue.</value>
  </data>
  <data name="Err_NoMonitors" xml:space="preserve">
    <value>No monitors have been defined.</value>
  </data>
  <data name="Err_RunIdAlreadyUsed" xml:space="preserve">
    <value>That runid was already used. Must use a unique runid for each run. Use --overwrite to discard previous run information.</value>
  </data>
  <data name="Err_Iproute2" xml:space="preserve">
    <value>Could not run 'ss' do you have 'iproute2' installed?</value>
  </data>
  <data name="Err_Lsof" xml:space="preserve">
    <value>Could not run/parse 'lsof'.</value>
  </data>
  <data name="Exporting" xml:space="preserve">
    <value>Exporting</value>
  </data>
  <data name="InvalidPath" xml:space="preserve">
    <value>The path supplied was invalid.</value>
  </data>
  <data name="MonitoringPressC" xml:space="preserve">
    <value>Monitoring, press CTRL+C to stop...</value>
  </data>
  <data name="MonitorStartedFor" xml:space="preserve">
    <value>Monitor started for</value>
  </data>
  <data name="WelcomeHeader" xml:space="preserve">
    <value>Welcome to Attack Surface Analyzer</value>
  </data>
  <data name="AccountType" xml:space="preserve">
    <value>Account Type</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AnalyzeResults" xml:space="preserve">
    <value>Analyze Results</value>
  </data>
  <data name="BaseRunId" xml:space="preserve">
    <value>Base Run Id</value>
  </data>
  <data name="BaseStatus" xml:space="preserve">
    <value>Status messages appear here after starting analysis.</value>
  </data>
  <data name="Certificates" xml:space="preserve">
    <value>Certificates</value>
  </data>
  <data name="ChangeType" xml:space="preserve">
    <value>Change Type</value>
  </data>
  <data name="ChooseCollectors" xml:space="preserve">
    <value>Choose Collectors</value>
  </data>
  <data name="ChooseMonitor" xml:space="preserve">
    <value>Choose a monitor run to evaluate.</value>
  </data>
  <data name="CollectSnapshotDesc" xml:space="preserve">
    <value>Collect snapshot data about the current state of the system and monitor for changes.</value>
  </data>
  <data name="CompareDesc" xml:space="preserve">
    <value>Compare a base scan and a product scan to determine changes made to the system.</value>
  </data>
  <data name="CompareRunId" xml:space="preserve">
    <value>Product Run Id</value>
  </data>
  <data name="Contents" xml:space="preserve">
    <value>Contents</value>
  </data>
  <data name="CurrentState" xml:space="preserve">
    <value>Current State</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="DisplayName" xml:space="preserve">
    <value>DIsplay Name</value>
  </data>
  <data name="Err_NeedResults" xml:space="preserve">
    <value>You must collect some results before performing analysis.</value>
  </data>
  <data name="Err_OutputPathNotExist" xml:space="preserve">
    <value>Provided output path {0} does not exist.</value>
  </data>
  <data name="ExportAll" xml:space="preserve">
    <value>Export all available result types</value>
  </data>
  <data name="ExportDirectory" xml:space="preserve">
    <value>Output Directory For Export</value>
  </data>
  <data name="ExportOnly" xml:space="preserve">
    <value>Export only the selected result type</value>
  </data>
  <data name="ExportOptions" xml:space="preserve">
    <value>Export Options</value>
  </data>
  <data name="Files" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="FirstScanDesc" xml:space="preserve">
    <value>The first, pre-installation scan should be run on a clean system without the software under test installed.</value>
  </data>
  <data name="Hash" xml:space="preserve">
    <value>Hash</value>
  </data>
  <data name="LiveMonitoring" xml:space="preserve">
    <value>Live Monitoring</value>
  </data>
  <data name="LiveMonitoringDesc" xml:space="preserve">
    <value>This will monitor your system for changes as they happen.</value>
  </data>
  <data name="MoreInfo1" xml:space="preserve">
    <value>For more information, please visit our</value>
  </data>
  <data name="MoreInfo2" xml:space="preserve">
    <value>page to review the ASA user guide, documentation and source code.</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="OldName" xml:space="preserve">
    <value>Old Name</value>
  </data>
  <data name="OldPath" xml:space="preserve">
    <value>Old Path</value>
  </data>
  <data name="Path" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="Permissions" xml:space="preserve">
    <value>Permissions</value>
  </data>
  <data name="Ports" xml:space="preserve">
    <value>Ports</value>
  </data>
  <data name="ReadyToScan" xml:space="preserve">
    <value>Ready to scan.</value>
  </data>
  <data name="Registry" xml:space="preserve">
    <value>Registry</value>
  </data>
  <data name="ResultsDesc" xml:space="preserve">
    <value>Compare, view, and export Scan and Monitor results.</value>
  </data>
  <data name="RunStatus" xml:space="preserve">
    <value>Run Status</value>
  </data>
  <data name="ScanId" xml:space="preserve">
    <value>Run Id</value>
  </data>
  <data name="ScanType" xml:space="preserve">
    <value>Scan Type</value>
  </data>
  <data name="SecondScanDesc" xml:space="preserve">
    <value>The second, post-installation scan should be run after installing the software onto the system.</value>
  </data>
  <data name="SelectResultType" xml:space="preserve">
    <value>Select a type of result to view.</value>
  </data>
  <data name="ServiceName" xml:space="preserve">
    <value>Service Name</value>
  </data>
  <data name="Services" xml:space="preserve">
    <value>Services</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="StartType" xml:space="preserve">
    <value>Start Type</value>
  </data>
  <data name="StaticScan" xml:space="preserve">
    <value>Static Scan</value>
  </data>
  <data name="StaticScanDesc" xml:space="preserve">
    <value>This will scan your system to gather a snapshot of the chosen parameters.  To determine the changes made by the installation of a specific piece of software the system must be scanned at least twice.</value>
  </data>
  <data name="StoreLocation" xml:space="preserve">
    <value>Store Location</value>
  </data>
  <data name="StoreName" xml:space="preserve">
    <value>Store Name</value>
  </data>
  <data name="OutputDirectory" xml:space="preserve">
    <value>Output Directory For Export</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="UsageData" xml:space="preserve">
    <value>Send usage data to Microsoft to help us improve our products.</value>
  </data>
  <data name="Users" xml:space="preserve">
    <value>Users</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="WelcomeBody" xml:space="preserve">
    <value>Attack Surface Analyzer catalogues the changes made to an operating system attack surface by the installation of new software. ASA can be used to take a snapshot of your system state before and after the installation of product(s) and displays the changes made to a number of key elements of the system attack surface allowing you to see what attack surfaces may be exposed after installation of the target product(s). ASA was developed by Microsoft.</value>
  </data>
  <data name="RunStarted" xml:space="preserve">
    <value>Run started.</value>
  </data>
  <data name="Created" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Deleted</value>
  </data>
  <data name="Err_NoCollectors" xml:space="preserve">
    <value>No collectors have been defined.</value>
  </data>
  <data name="Found" xml:space="preserve">
    <value>Found</value>
  </data>
  <data name="Collectors" xml:space="preserve">
    <value>Collectors</value>
  </data>
  <data name="Err_AccessControl" xml:space="preserve">
    <value>Could not get file permissions for: {0}</value>
  </data>
  <data name="Err_FiltersFile" xml:space="preserve">
    <value>Json error parsing your filters.json file. {0} {1} {2} {3} {4}</value>
  </data>
  <data name="FailedParsed" xml:space="preserve">
    <value>Could not parse {0} {1} {2} {3} {4}.</value>
  </data>
  <data name="EmptyEntry" xml:space="preserve">
    <value>Empty filter entry {0} {1} {2} {3} {4}.</value>
  </data>
  <data name="LoadedFilters" xml:space="preserve">
    <value>Loaded filters: {0}</value>
  </data>
  <data name="Modified" xml:space="preserve">
    <value>Modified</value>
  </data>
  <data name="Scanning" xml:space="preserve">
    <value>Scanning</value>
  </data>
  <data name="Starting" xml:space="preserve">
    <value>Starting {0}.</value>
  </data>
  <data name="SuccessParsed" xml:space="preserve">
    <value>Successfully Parsed {0} {1} {2} {3} {4}.</value>
  </data>
  <data name="DueToFilter" xml:space="preserve">
    <value>Due To Filter</value>
  </data>
  <data name="ExcludingHive" xml:space="preserve">
    <value>Excluding Hive</value>
  </data>
  <data name="OutputWrittenTo" xml:space="preserve">
    <value>Output written to: {0}</value>
  </data>
  <data name="DumpingDataFromDatabase" xml:space="preserve">
    <value>Dumping data from database located at {0}.</value>
  </data>
  <data name="NoCollectRuns" xml:space="preserve">
    <value>There were no collect runs in the database.</value>
  </data>
  <data name="NoMonitorRuns" xml:space="preserve">
    <value>There were no monitor runs in the database.</value>
  </data>
  <data name="FirstRunListRunsError" xml:space="preserve">
    <value>This appears to be the first run with database {0}. There are no runs to list.</value>
  </data>
  <data name="FailedToDeleteDatabase" xml:space="preserve">
    <value>Failed to delete database at {0}. {1}:{2}</value>
  </data>
  <data name="DeletedDatabaseAt" xml:space="preserve">
    <value>Deleted database at {0}. 💣</value>
  </data>
  <data name="Completed" xml:space="preserve">
    <value>Completed {0} in {1}.</value>
  </data>
  <data name="FoundCreated" xml:space="preserve">
    <value>Found {0} created.</value>
  </data>
  <data name="FoundDeleted" xml:space="preserve">
    <value>Found {0} deleted.</value>
  </data>
  <data name="FoundModified" xml:space="preserve">
    <value>Found {0} modified.</value>
  </data>
  <data name="StartingN" xml:space="preserve">
    <value>Starting {0} {1}.</value>
  </data>
  <data name="Err_RunAsAdmin" xml:space="preserve">
    <value>Attack Surface Analyzer is not running as Administrator. Results may not be complete.</value>
  </data>
  <data name="Err_RunAsRoot" xml:space="preserve">
    <value>Attack Surface Analyzer is not running as root. Results may not be complete.</value>
  </data>
  <data name="LoadedAnalyses" xml:space="preserve">
    <value>Loaded Analyses from {0}.</value>
  </data>
  <data name="BinaryName" xml:space="preserve">
    <value>Binary Name</value>
  </data>
  <data name="Com" xml:space="preserve">
    <value>COM Objects</value>
  </data>
  <data name="Firewall" xml:space="preserve">
    <value>Firewall</value>
  </data>
  <data name="RegistryPath" xml:space="preserve">
    <value>Registry Path</value>
  </data>
  <data name="Log" xml:space="preserve">
    <value>Event Logs</value>
  </data>
  <data name="Summary" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="Err_ParsingFilters" xml:space="preserve">
    <value>Error parsing filters.</value>
  </data>
  <data name="Err_ResultTypesCounts" xml:space="preserve">
    <value>Error fetching result types and counts from the database.</value>
  </data>
  <data name="Err_Sql" xml:space="preserve">
    <value>SQL Error in {0}. Your database may be corrupted.</value>
  </data>
  <data name="Err_PlatIncompat" xml:space="preserve">
    <value>{0} isn't compatible with this platform and has been skipped.</value>
  </data>
  <data name="UsersCheckbox" xml:space="preserve">
    <value>Users and Groups</value>
  </data>
  <data name="Err_MalformedFilterFile" xml:space="preserve">
    <value>Provided filter file at {0} was malformed, missing, or otherwise unable to be parsed.</value>
  </data>
  <data name="CollectorNotSupportedOnPlatform" xml:space="preserve">
    <value>{0} isn't supported on this platform and failed to run. This won't impact results for other collectors.</value>
  </data>
  <data name="MainConnection" xml:space="preserve">
    <value>MainConnection</value>
  </data>
  <data name="Err_ClauseDuplicateName" xml:space="preserve">
    <value>Rule {0} has clauses with duplicate name {1}.")</value>
  </data>
  <data name="Err_ClauseInvalidLabel" xml:space="preserve">
    <value>Rule {0} has clauses invalid name {1}. Names may not contains spaces or parentheses.</value>
  </data>
  <data name="Err_ClauseUnbalancedParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} has unbalanced parentheses.</value>
  </data>
  <data name="Err_ClauseParenthesisInLabel" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid parenthesis in label {2}</value>
  </data>
  <data name="Err_ClauseCharactersBetweenOpenParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid characters between open parentheses in label {2}</value>
  </data>
  <data name="Err_ClauseCharactersBeforeOpenParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid characters before open parenthesis in label {2}</value>
  </data>
  <data name="Err_ClauseCharactersBetweenClosedParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid characters between close parentheses in label {2}</value>
  </data>
  <data name="Err_ClauseCharactersAfterClosedParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid characters after a close parenthesis {2}</value>
  </data>
  <data name="Err_ClauseMultipleConsecutiveNots" xml:space="preserve">
    <value>Expression {0} in rule {1} contains multiple NOTs in a row.</value>
  </data>
  <data name="Err_ClauseCloseParenthesesInNot" xml:space="preserve">
    <value>Expression {0} in rule {1} contains close parenthesis in NOT operator {2}</value>
  </data>
  <data name="Err_ClauseUndefinedLabel" xml:space="preserve">
    <value>Expression {0} in rule {1} contains undefined label {2}</value>
  </data>
  <data name="Err_ClauseInvalidOperator" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid boolean operator {2}</value>
  </data>
  <data name="Err_ClauseInvalidNotOperator" xml:space="preserve">
    <value>Expression {0} in rule {1} contains NOT where a non-NOT operator was expected.</value>
  </data>
  <data name="Err_ClauseEndsWithOperator" xml:space="preserve">
    <value>Expression {0} in rule {1} ends with an operator.</value>
  </data>
  <data name="Err_ClauseUnusedLabel" xml:space="preserve">
    <value>Clause {0} is declared but never used in rule {1}.</value>
  </data>
  <data name="Err_ClauseMissingLabels" xml:space="preserve">
    <value>In rule {0} if any clause has labels they all must have labels.</value>
  </data>
  <data name="Err_ClauseExpressionButMissingLabels" xml:space="preserve">
    <value>In rule {0} expression is not null but some clauses have no label.</value>
  </data>
  <data name="Err_RulesInvalid" xml:space="preserve">
    <value>Invalid Analysis Rules.</value>
  </data>
  <data name="RulesVerified" xml:space="preserve">
    <value>Analysis Rules Verified Successfully.</value>
  </data>
  <data name="FailedToEstablishMainConnection" xml:space="preserve">
    <value>Failed to establish connection with main database specified at {0}.</value>
  </data>
  <data name="WrongSchema" xml:space="preserve">
    <value>Database has schema version {0} but database has schema version {1}.</value>
  </data>
  <data name="Err_ClauseNoData" xml:space="preserve">
    <value>Rule {0} Clause {1} does not contain any Data and will always return false.</value>
  </data>
  <data name="Err_ClauseDictDataUnexpected" xml:space="preserve">
    <value>Rule {0} Clause {1} contains DictData which is innapropriate for operation {2}.</value>
  </data>
  <data name="Err_ClauseNoDataOrDictData" xml:space="preserve">
    <value>Rule {0} Clause {1} does not contain any Data or DictData and will always return false.</value>
  </data>
  <data name="Err_ClauseBothDataDictData" xml:space="preserve">
    <value>Rule {0} Clause {1} contains both Data and DictData which is not allowed.</value>
  </data>
  <data name="Err_ClauseExpectedInt" xml:space="preserve">
    <value>Rule {0} Clause {1} does not contain exactly one integer in its Data field.</value>
  </data>
  <data name="Err_ClauseInvalidRegex" xml:space="preserve">
    <value>Rule {0} Clause {1} contains invalid Regex {2}.</value>
  </data>
  <data name="Err_ClauseRedundantData" xml:space="preserve">
    <value>Rule {0} Clause {1} contains redundant Data field which will be ignored.</value>
  </data>
  <data name="Err_ClauseRedundantDictData" xml:space="preserve">
    <value>Rule {0} Clause {1} contains redundant DictData field which will be ignored.</value>
  </data>
  <data name="Err_ClauseExpectedDateTime" xml:space="preserve">
    <value>Rule {0} Clause {1} does not contain exactly one DateTime in its Data field.</value>
  </data>
  <data name="Err_ClauseUnsuppportedOperator" xml:space="preserve">
    <value>Rule {0} Clause {1} uses unsupported Operator {2}.</value>
  </data>
  <data name="Err_ClauseMissingListData" xml:space="preserve">
    <value>Rule {0} Clause {1} is missing Data List.</value>
  </data>
  <data name="Err_ClauseUnexpectedDictData" xml:space="preserve">
    <value>Rule {0} Clause {1} contains unexpected Dictionary Data.</value>
  </data>
  <data name="Err_ClauseMissingCustomOperation" xml:space="preserve">
    <value>Rule {0} Clause {1} has specified custom operation but the CustomOperation field is missing.</value>
  </data>
  <data name="Err_AnalysisNull" xml:space="preserve">
    <value>The AnalysisFile passed in options was null and analysis cannot be performed.</value>
  </data>
  <data name="Err_CreateHash" xml:space="preserve">
    <value>Cryptographic Exception: Failed to get hash of {0}.</value>
  </data>
  <data name="Err_DatabaseManagerNull" xml:space="preserve">
    <value>DatabaseManager is null at execution of {0}.</value>
  </data>
  <data name="Err_RunIdNull" xml:space="preserve">
    <value>The provided RunId was null.</value>
  </data>
</root>