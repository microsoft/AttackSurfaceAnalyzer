@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData

<div>
    <div class="form-group">
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="enableRegistryCollectionCheckbox" @bind="appData.CollectOptions.EnableRegistryCollector" />
            <label class="form-check-label" for="enableRegistryCollectionCheckbox">Enable Registry Collector</label>
        </div>
    </div>
    <div class="form-group">
        <label for="selectedPathsString">Add Path to Scan:</label>
        <div class="form-row">
            <div class="col-9 mb-1">
                <input type="text" class="form-control" id="selectedPathsString" placeholder="LocalMachine\\SOFTWARE\Microsoft" @bind="SelectedHiveInput" />
            </div>
            <div class="col">
                <button class="btn btn-secondary" @onclick="PushInputToList">Add</button>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label for="selectedPathsList">Selected Paths:</label>
        <div class="form-row">
            <div class="col-9 mb-1">
                <select class="form-control @directorySelectElementGlowClass.ClassName" id="selectedPathsList" @bind="SelectedHiveTop">
                    @if (appData.CollectOptions.SelectedHives.Any())
                    {
                        var hiveList = appData.CollectOptions.SelectedHives.ToList();
                        for (var i = 0; i < hiveList.Count(); i++)
                        {
                            <option value="@i">@hiveList[i]</option>
                        }
                    }
                </select>
            </div>
            <div class="col">
                <button class="btn btn-secondary" @onclick="RemoveInputFromList">Remove</button>
            </div>
        </div>
    </div>
</div>

@code{
    Helper.GlowClass directorySelectElementGlowClass = new Helper.GlowClass();

    string SelectedHiveInput = string.Empty;
    int SelectedHiveTop;

    List<string> selectedHives = new List<string>();

    void UpdateHives()
    {
        appData.CollectOptions.SelectedHives = selectedHives;
    }

    void RemoveInputFromList()
    {
        if (selectedHives.Any() && selectedHives.Count > SelectedHiveTop)
        {
            selectedHives.RemoveAt(SelectedHiveTop);
            UpdateHives();
            if (selectedHives.Count <= SelectedHiveTop)
            {
                SelectedHiveTop = selectedHives.Count;
            }
            Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), directorySelectElementGlowClass, false);
        }

    }

    protected override void OnInitialized()
    {
        if (!appData.CollectOptions.SelectedHives.Any())
        {
            selectedHives = RegistryCollector.GetDefaultHives().ToList();
            UpdateHives();
        }
        base.OnInitialized();
    }

    void PushInputToList()
    {
        selectedHives.Add(SelectedHiveInput);
        SelectedHiveTop = selectedHives.Count - 1;
        UpdateHives();
        Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), directorySelectElementGlowClass, true);
        SelectedHiveInput = string.Empty;
    }
}
