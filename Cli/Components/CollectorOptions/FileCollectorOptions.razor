@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData
@using Microsoft.CST.AttackSurfaceAnalyzer.Cli

<div>
    <div class="form-group">
        <div class="form-check">
            <input type="checkbox" class="form-check-input" id="enableFileSystemCollectionCheckbox" @bind="appData.CollectOptions.EnableFileSystemCollector" />
            <label class="form-check-label" for="enableFileSystemCollectionCheckbox">Enable FileSystem Collector</label>
        </div>
    </div>
    <div class="form-group">
        <label for="selectedDirectoriesString">Add Directory to Scan:</label>
        <div class="form-row">
            <div class="col-9 mb-1">
                <input type="text" class="form-control" id="selectedDirectoriesString" placeholder="/my/path/" @bind="SelectedDirectoryInput" />
            </div>
            <div class="col">
                <button class="btn btn-secondary" @onclick="PushInputToList">Add</button>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label for="selectedDirectoriesList">Selected Directories:</label>
        <div class="form-row">
            <div class="col-9 mb-1">
                <select class="form-control @directorySelectElementGlowClass.ClassName" id="selectedDirectoriesList" @bind="SelectedDirectoryTop">
                    @for (var i = 0; i < appData.CollectOptions.SelectedDirectories.Count(); i++)
                    {
                        <option value="@i">@appData.CollectOptions.SelectedDirectories.ToList()[i]</option>
                    }
                </select>
            </div>
            <div class="col">
                <button class="btn btn-secondary" @onclick="RemoveInputFromList">Remove</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-auto">
            <div class="form-group">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="enableGatherHashesCheckbox" @bind="appData.CollectOptions.GatherHashes" />
                    <label class="form-check-label" for="enableGatherHashesCheckbox">Gather File Hashes</label>
                </div>
            </div>
        </div>
        <div class="col-auto">
            <div class="form-group">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="enableCrawlArchivesCheckbox" @bind="appData.CollectOptions.CrawlArchives" />
                    <label class="form-check-label" for="enableCrawlArchivesCheckbox">Crawl into Archives</label>
                </div>
            </div>
        </div>
        <div class="col-auto">
            <div class="form-group">
                <div class="form-check">
                    <input type="checkbox" class="form-check-input" id="enableDownloadCloudCheckbox" @bind="appData.CollectOptions.DownloadCloud" />
                    <label class="form-check-label" for="enableDownloadCloudCheckbox">Download Cloud Files</label>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    Helper.GlowClass directorySelectElementGlowClass = new Helper.GlowClass();

    string SelectedDirectoryInput = string.Empty;
    int SelectedDirectoryTop;

    void RemoveInputFromList()
    {
        if (appData.CollectOptions.SelectedDirectories.Count() > SelectedDirectoryTop)
        {
            appData.CollectOptions.SelectedDirectories = appData.CollectOptions.SelectedDirectories.Except(appData.CollectOptions.SelectedDirectories.Skip(SelectedDirectoryTop-1).Take(1));
            Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), directorySelectElementGlowClass, false);
        }
    }

    void PushInputToList()
    {
        appData.CollectOptions.SelectedDirectories = appData.CollectOptions.SelectedDirectories.Union(new string[] { SelectedDirectoryInput });
        SelectedDirectoryTop = appData.CollectOptions.SelectedDirectories.Count() - 1;
        Helper.ToggleGlow(() => InvokeAsync(StateHasChanged), directorySelectElementGlowClass, true);
        SelectedDirectoryInput = string.Empty;
    }
}
