@using Microsoft.CST.OAT.Blazor.Components;
@using Microsoft.CST.AttackSurfaceAnalyzer.Types
@using System.Threading;
@using Microsoft.CST.AttackSurfaceAnalyzer.Objects
@using Microsoft.CST.AttackSurfaceAnalyzer.Collectors
@using static Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData
@inject Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData appData

@page "/guided"

<h4>Guided Mode</h4>
<div class="container-fluid bg-custom my-1 pb-1">
    @if (appData.exclusiveMode == Mode.Scan)
    {
        <p>You cannot start a guided mode scan while scanning. Complete your existing scan first.</p>
    }
    else if (appData.exclusiveMode == Mode.Monitor)
    {
        <p>You cannot start a guided mode scan while monitoring. Complete your monitoring first.</p>
    }
    else
    {
        @switch (appData.guidedPageState)
        {
            case GuidedPageState.Options:
                <div class="run-box bg-custom">
                    <div class="form-inline">
                        <label class="mr-2" for="RunId">Run ID:</label>
                        <input type="text" class="form-control mr-2" id="RunId" placeholder="@GetPlaceholder()" @bind="RunIdInput" disabled="@UseTimestamp" />
                        <div class="form-check mr-2">
                            <input type="checkbox" class="form-check-input" id="UseTimestampCheckbox" @bind="UseTimestamp" />
                            <label class="form-check-label" for="UseTimestampCheckbox">Use Timestamp</label>
                        </div>
                        <button class="btn btn-primary" @onclick="BeginGuided">Start Guided Scan</button>
                    </div>
                </div>
                <ul class="nav nav-tabs mb-3" id="options-tabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="collectors-tab" data-toggle="tab" href="#collectors" role="tab" aria-controls="collectors" aria-selected="true">Collectors</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="monitor-tab" data-toggle="tab" href="#monitor" role="tab" aria-controls="monitor" aria-selected="false">Monitor</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="analyze-tab" data-toggle="tab" href="#analyze" role="tab" aria-controls="analyze" aria-selected="false">Analyze</a>
                    </li>
                </ul>
                <div class="tab-content" id="options-tabs-content">
                    <div class="tab-pane fade show active" id="collectors" role="tabpanel" aria-labelledby="collectors-tab">
                        <CollectorOptionsRazor />
                    </div>
                    <div class="tab-pane fade" id="monitor" role="tabpanel" aria-labelledby="monitor-tab">
                        <MonitorOptionsRazor />
                    </div>
                    <div class="tab-pane fade" id="analyze" role="tabpanel" aria-labelledby="analyze-tab">
                        <AnalyzeOptionsRazor />
                    </div>
                </div>

                break;
            case GuidedPageState.Scanning:
                <Scanning />
                break;
            case GuidedPageState.Monitoring:
                <Monitoring Continue="@ContinueGuided" />
                break;
            case GuidedPageState.MonitorFlushing:
                <MonitorFlushing />
                break;
            case GuidedPageState.Analyzing:
                <Analyzing />
                break;
            case GuidedPageState.Results:
                <button class="btn btn-primary" @onclick="Reset">Start Again</button>
                <Results GuidedRunId="@appData.RunId" FirstRunId="@appData.ExportCollectCommandOptions.FirstRunId" SecondRunId="@appData.ExportCollectCommandOptions.SecondRunId" AnalysesHash="@appData.CompareCommandOptions.AnalysesFile?.GetHash()" MonitorRunId="@appData.MonitorOptions.RunId" />
                break;
            case GuidedPageState.Error:
                <p>An Error Occured while collecting.</p>
                <button @onclick="Reset">Restart</button>
                break;
        }
    }
</div>

@code{


    bool UseTimestamp = true;
    string RunIdInput = "";

    string GetPlaceholder()
    {
        return UseTimestamp ? "Timestamp Will Be Used" : "Enter Run ID";
    }

    void Reset()
    {
        appData.guidedPageState = GuidedPageState.Options;
    }

    bool TrySetExclusive()
    {
        if (appData.exclusiveMode == Mode.None)
        {
            appData.exclusiveMode = Mode.Guided;
            return true;
        }
        return false;
    }

    void ResetExclusive()
    {
        if (appData.exclusiveMode == Mode.Guided)
        {
            appData.exclusiveMode = Mode.None;
        }
    }

    async void BeginGuided()
    {
        if (TrySetExclusive())
        {
            appData.RunId = UseTimestamp ? DateTime.Now.ToString() : RunIdInput;
            timer = new System.Threading.Timer((_) => InvokeAsync(() => StateHasChanged()), null, 0, 100);
            appData.CollectOptions.RunId = appData.FirstRunId;
            if (await BeginScan() == ASA_ERROR.NONE)
            {
                appData.MonitorOptions.RunId = appData.MonitorRunId;
                await BeginMonitor();
                AttackSurfaceAnalyzerClient.ClearCollectors();
            }
            else
            {
                appData.guidedPageState = GuidedPageState.Error;
                appData.exclusiveMode = Mode.None;
            }        
        }
        else
        {
            appData.monitorPageState = MonitorPageState.Error;
        }
    }

    async void ContinueGuided()
    {
        appData.guidedPageState = GuidedPageState.MonitorFlushing;
        this.StateHasChanged();
        await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.StopMonitors());
        while (AttackSurfaceAnalyzerClient.DatabaseManager?.HasElements ?? false)
        {
            Thread.Sleep(1);
        }

        appData.CollectOptions.RunId = appData.SecondRunId;
        await BeginScan();

        appData.ExportCollectCommandOptions.SaveToDatabase = true;
        appData.ExportCollectCommandOptions.FirstRunId = appData.FirstRunId;
        appData.ExportCollectCommandOptions.SecondRunId = appData.SecondRunId;
        await BeginAnalyze();
        appData.guidedPageState = GuidedPageState.Results;
        ResetExclusive();
    }

    System.Threading.Timer? timer;

    async Task<ASA_ERROR> BeginScan()
    {
        appData.guidedPageState = GuidedPageState.Scanning;
        this.StateHasChanged();
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunCollectCommand(appData.CollectOptions));
    }

    async Task<ASA_ERROR> BeginMonitor()
    {
        appData.guidedPageState = GuidedPageState.Monitoring;
        this.StateHasChanged();
        return await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunGuiMonitorCommand(appData.MonitorOptions));
    }

    async Task<ASA_ERROR> BeginAnalyze()
    {
        appData.guidedPageState = GuidedPageState.Analyzing;

        await Task.Factory.StartNew(() =>
        {
            var CompareOneOptions = appData.CompareCommandOptions;
            CompareOneOptions.FirstRunId = appData.ExportCollectCommandOptions.FirstRunId;
            CompareOneOptions.SecondRunId = appData.ExportCollectCommandOptions.SecondRunId ?? string.Empty;
            var results = AttackSurfaceAnalyzerClient.CompareRuns(CompareOneOptions);
            AttackSurfaceAnalyzerClient.InsertCompareResults(results, appData.ExportCollectCommandOptions.FirstRunId, appData.ExportCollectCommandOptions.SecondRunId ?? string.Empty, appData.CompareCommandOptions.AnalysesFile?.GetHash() ?? "");
        });

        await Task.Factory.StartNew(() =>
        {
            var CompareTwoOptions = appData.CompareCommandOptions;

            CompareTwoOptions.FirstRunId = null;
            CompareTwoOptions.SecondRunId = appData.MonitorRunId;
            var results = AttackSurfaceAnalyzerClient.CompareRuns(CompareTwoOptions);
            AttackSurfaceAnalyzerClient.InsertCompareResults(results, null, appData.MonitorRunId, appData.CompareCommandOptions.AnalysesFile?.GetHash() ?? "");
        });
        return ASA_ERROR.NONE;
    }
}