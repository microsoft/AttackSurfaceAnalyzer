@page "/scan"
@using static Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData

<h4>Scan</h4>
<div class="container-fluid bg-custom my-1 pb-1">
    @if (appData.exclusiveMode == Mode.Monitor)
    {
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                                                                        
    }
    else if (appData.exclusiveMode == Mode.Guided)
    {
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                                                                                              
    }
    else
    {
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
         switch (appData.scanPageState)
        {
            case ScanPageState.Options:
                

#line default
#line hidden
#nullable disable
            __o = Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 22 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                                                                                                  RunIdInput

#line default
#line hidden
#nullable disable
            );
            __o = Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => RunIdInput = __value, RunIdInput);
            __o = Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 24 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                                                                                             UseTimestamp

#line default
#line hidden
#nullable disable
            );
            __o = Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => UseTimestamp = __value, UseTimestamp);
            __o = Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 27 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                                                  BeginScan

#line default
#line hidden
#nullable disable
            );
                      
                
            __builder.AddAttribute(-1, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
            }
            ));
#nullable restore
#line 30 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
__o = typeof(CollectorOptionsRazor);

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                         
                break;
            case ScanPageState.Scanning:
                

#line default
#line hidden
#nullable disable
            __builder.AddAttribute(-1, "ChildContent", (Microsoft.AspNetCore.Components.RenderFragment)((__builder2) => {
            }
            ));
#nullable restore
#line 33 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
__o = typeof(Scanning);

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                            
                break;
            case ScanPageState.Finished:
                

#line default
#line hidden
#nullable disable
                                         
                
            __o = Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 37 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                                          GoToOptions

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line 37 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                                                                          
                break;
            case ScanPageState.Error:
                

#line default
#line hidden
#nullable disable
                                                         
                
            __o = Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 41 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                                          GoToOptions

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line 41 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
                                                                                       
                break;
        }

#line default
#line hidden
#nullable disable
#nullable restore
#line 43 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
         
    }

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
#nullable restore
#line 47 "c:/Users/gstocco/Documents/GitHub/AttackSurfaceAnalyzer/Cli/Pages/Scan.razor"
       
    bool UseTimestamp = true;
    string RunIdInput = "";

    System.Threading.Timer timer = new Timer((_) => { }, null, int.MaxValue, Timeout.Infinite);

    bool TrySetExclusive()
    {
        if (appData.exclusiveMode == Mode.None)
        {
            appData.exclusiveMode = Mode.Scan;
            return true;
        }
        return false;
    }

    void ResetExclusive()
    {
        if (appData.exclusiveMode == Mode.Scan)
        {
            appData.exclusiveMode = Mode.None;
        }
    }

    async void BeginScan()
    {
        if (TrySetExclusive())
        {
            appData.RunId = UseTimestamp ? DateTime.Now.ToString() : RunIdInput;
            timer = new System.Threading.Timer((_) => InvokeAsync(() => StateHasChanged()), null, 0, 100);
            appData.CollectOptions.RunId = appData.FirstRunId;
            appData.scanPageState = ScanPageState.Scanning;
            this.StateHasChanged();
            if (await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunCollectCommand(appData.CollectOptions)) == Microsoft.CST.AttackSurfaceAnalyzer.Types.ASA_ERROR.NONE)
            {
                appData.scanPageState = ScanPageState.Finished;
            }
            else
            {
                appData.scanPageState = ScanPageState.Error;
            }
            AttackSurfaceAnalyzerClient.ClearCollectors();
            ResetExclusive();
        }
        else
        {
            appData.scanPageState = ScanPageState.Error;
        }
        
    }

    void GoToOptions()
    {
        appData.scanPageState = ScanPageState.Options;
    }
}
