@page "/scan"
@using static Microsoft.CST.AttackSurfaceAnalyzer.Cli.AppData

<h4>Scan</h4>
<div class="container-fluid bg-custom my-1 pb-1">
    @if (appData.exclusiveMode == Mode.Monitor)
    {
        <p>You cannot start a scan while monitoring. Complete your monitoring first.</p>
    }
    else if (appData.exclusiveMode == Mode.Guided)
    {
        <p>You cannot start a scan while running a guided mode scan. Complete your guided mode scan first.</p>
    }
    else
    {
        @switch (appData.scanPageState)
        {
            case ScanPageState.Options:
                <div class="run-box bg-custom">
                    <div class="form-inline">
                        <label class="mr-2" for="RunId">Run ID:</label>
                        <input type="text" class="form-control mr-2" id="RunId" placeholder="Enter Run ID" @bind="RunIdInput" />
                        <div class="form-check mr-2">
                            <input type="checkbox" class="form-check-input" id="UseTimestampCheckbox" @bind="UseTimestamp" />
                            <label class="form-check-label" for="UseTimestampCheckbox">Use Timestamp</label>
                        </div>
                        <button class="btn btn-primary" @onclick="BeginScan">Start Scan</button>
                    </div>
                </div>
                <CollectorOptionsRazor />
                break;
            case ScanPageState.Scanning:
                <Scanning />
                break;
            case ScanPageState.Finished:
                <p>Scanning complete.</p>
                <button class="btn btn-primary" @onclick="GoToOptions">Scan Again</button>
                break;
            case ScanPageState.Error:
                <p>An Error Occured while collecting.</p>
                <button class="btn btn-primary" @onclick="GoToOptions">Restart</button>
                break;
        }
    }
</div>

@code {
    bool UseTimestamp = true;
    string RunIdInput = "";

    System.Threading.Timer? timer;

    bool TrySetExclusive()
    {
        if (appData.exclusiveMode == Mode.None)
        {
            appData.exclusiveMode = Mode.Scan;
            return true;
        }
        return false;
    }

    void ResetExclusive()
    {
        if (appData.exclusiveMode == Mode.Scan)
        {
            appData.exclusiveMode = Mode.None;
        }
    }

    async void BeginScan()
    {
        if (TrySetExclusive())
        {
            appData.RunId = UseTimestamp ? DateTime.Now.ToString() : RunIdInput;
            timer = new System.Threading.Timer((_) => InvokeAsync(() => StateHasChanged()), null, 0, 100);
            appData.CollectOptions.RunId = appData.FirstRunId;
            appData.scanPageState = ScanPageState.Scanning;
            this.StateHasChanged();
            if (await Task.Factory.StartNew(() => AttackSurfaceAnalyzerClient.RunCollectCommand(appData.CollectOptions)) == Microsoft.CST.AttackSurfaceAnalyzer.Types.ASA_ERROR.NONE)
            {
                appData.scanPageState = ScanPageState.Finished;
            }
            else
            {
                appData.scanPageState = ScanPageState.Error;
            }
            AttackSurfaceAnalyzerClient.ClearCollectors();
            ResetExclusive();
        }
        else
        {
            appData.scanPageState = ScanPageState.Error;
        }
        
    }

    void GoToOptions()
    {
        appData.scanPageState = ScanPageState.Options;
    }
}